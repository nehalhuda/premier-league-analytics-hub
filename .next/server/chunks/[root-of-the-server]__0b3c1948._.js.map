{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/scorePredictor.ts"],"sourcesContent":["interface TeamStats {\n  name: string;\n  goals_for: number;\n  goals_against: number;\n  wins: number;\n  draws: number;\n  losses: number;\n  form: string[];\n  home_advantage?: boolean;\n}\n\ninterface PredictionResult {\n  homeTeam: string;\n  awayTeam: string;\n  predictedHomeScore: number;\n  predictedAwayScore: number;\n  confidence: number;\n  winProbability: {\n    home: number;\n    draw: number;\n    away: number;\n  };\n}\n\nexport async function predictMatchScore(\n  homeTeam: string, \n  awayTeam: string\n): Promise<PredictionResult> {\n  try {\n    // In a real implementation, this would fetch from Football-Data.org API\n    // For now, we'll use mock data with realistic calculations\n    const homeStats = await getTeamStats(homeTeam);\n    const awayStats = await getTeamStats(awayTeam);\n    \n    // Calculate attacking and defensive strength\n    const homeAttackStrength = homeStats.goals_for / (homeStats.wins + homeStats.draws + homeStats.losses);\n    const homeDefenseStrength = homeStats.goals_against / (homeStats.wins + homeStats.draws + homeStats.losses);\n    const awayAttackStrength = awayStats.goals_for / (awayStats.wins + awayStats.draws + awayStats.losses);\n    const awayDefenseStrength = awayStats.goals_against / (awayStats.wins + awayStats.draws + awayStats.losses);\n    \n    // Home advantage factor\n    const homeAdvantage = 0.3;\n    \n    // Form factor (recent 5 games)\n    const homeFormFactor = calculateFormFactor(homeStats.form);\n    const awayFormFactor = calculateFormFactor(awayStats.form);\n    \n    // Predicted goals\n    const predictedHomeGoals = Math.max(0, \n      (homeAttackStrength * (1 + homeAdvantage) * homeFormFactor) - \n      (awayDefenseStrength * awayFormFactor)\n    );\n    \n    const predictedAwayGoals = Math.max(0,\n      (awayAttackStrength * awayFormFactor) - \n      (homeDefenseStrength * (1 + homeAdvantage) * homeFormFactor)\n    );\n    \n    // Round to realistic scores\n    const homeScore = Math.round(Math.max(0, Math.min(5, predictedHomeGoals)));\n    const awayScore = Math.round(Math.max(0, Math.min(5, predictedAwayGoals)));\n    \n    // Calculate win probabilities\n    const winProbability = calculateWinProbabilities(homeScore, awayScore);\n    \n    // Calculate confidence based on form and stats consistency\n    const confidence = Math.min(95, Math.max(60, \n      75 + (homeFormFactor + awayFormFactor) * 10\n    ));\n    \n    return {\n      homeTeam,\n      awayTeam,\n      predictedHomeScore: homeScore,\n      predictedAwayScore: awayScore,\n      confidence: Math.round(confidence),\n      winProbability\n    };\n    \n  } catch (error) {\n    console.error('Error predicting match score:', error);\n    throw new Error('Failed to predict match score');\n  }\n}\n\nasync function getTeamStats(teamName: string): Promise<TeamStats> {\n  // Mock data - in real implementation, this would call Football-Data.org API\n  const mockTeamStats: Record<string, TeamStats> = {\n    'Manchester City': {\n      name: 'Manchester City',\n      goals_for: 45,\n      goals_against: 18,\n      wins: 14,\n      draws: 3,\n      losses: 2,\n      form: ['W', 'W', 'W', 'D', 'W']\n    },\n    'Arsenal': {\n      name: 'Arsenal',\n      goals_for: 42,\n      goals_against: 22,\n      wins: 12,\n      draws: 4,\n      losses: 3,\n      form: ['W', 'L', 'W', 'W', 'D']\n    },\n    'Liverpool': {\n      name: 'Liverpool',\n      goals_for: 48,\n      goals_against: 25,\n      wins: 13,\n      draws: 3,\n      losses: 3,\n      form: ['W', 'W', 'D', 'W', 'W']\n    },\n    'Chelsea': {\n      name: 'Chelsea',\n      goals_for: 35,\n      goals_against: 28,\n      wins: 10,\n      draws: 5,\n      losses: 4,\n      form: ['D', 'W', 'L', 'W', 'D']\n    },\n    'Manchester United': {\n      name: 'Manchester United',\n      goals_for: 32,\n      goals_against: 30,\n      wins: 9,\n      draws: 6,\n      losses: 4,\n      form: ['L', 'D', 'W', 'D', 'L']\n    },\n    'Tottenham': {\n      name: 'Tottenham',\n      goals_for: 38,\n      goals_against: 32,\n      wins: 10,\n      draws: 4,\n      losses: 5,\n      form: ['W', 'L', 'W', 'W', 'L']\n    }\n  };\n  \n  return mockTeamStats[teamName] || {\n    name: teamName,\n    goals_for: 25,\n    goals_against: 35,\n    wins: 6,\n    draws: 5,\n    losses: 8,\n    form: ['L', 'D', 'L', 'W', 'D']\n  };\n}\n\nfunction calculateFormFactor(form: string[]): number {\n  const weights = [0.4, 0.3, 0.2, 0.1, 0.05]; // Recent games have more weight\n  let formScore = 0;\n  \n  form.slice(0, 5).forEach((result, index) => {\n    const weight = weights[index] || 0.05;\n    switch (result) {\n      case 'W': formScore += 3 * weight; break;\n      case 'D': formScore += 1 * weight; break;\n      case 'L': formScore += 0 * weight; break;\n    }\n  });\n  \n  return Math.max(0.5, Math.min(1.5, formScore / 3)); // Normalize between 0.5 and 1.5\n}\n\nfunction calculateWinProbabilities(homeScore: number, awayScore: number) {\n  let home = 0, draw = 0, away = 0;\n  \n  if (homeScore > awayScore) {\n    home = 60 + (homeScore - awayScore) * 10;\n    draw = 25;\n    away = 15 - (homeScore - awayScore) * 5;\n  } else if (awayScore > homeScore) {\n    away = 60 + (awayScore - homeScore) * 10;\n    draw = 25;\n    home = 15 - (awayScore - homeScore) * 5;\n  } else {\n    draw = 40;\n    home = 30;\n    away = 30;\n  }\n  \n  // Ensure probabilities are within realistic bounds and sum to 100\n  home = Math.max(5, Math.min(80, home));\n  away = Math.max(5, Math.min(80, away));\n  draw = Math.max(10, Math.min(50, draw));\n  \n  const total = home + draw + away;\n  return {\n    home: Math.round((home / total) * 100),\n    draw: Math.round((draw / total) * 100),\n    away: Math.round((away / total) * 100)\n  };\n}\n\nexport const PREMIER_LEAGUE_TEAMS = [\n  'Manchester City',\n  'Arsenal',\n  'Liverpool',\n  'Chelsea',\n  'Manchester United',\n  'Tottenham',\n  'Newcastle United',\n  'Brighton',\n  'West Ham',\n  'Aston Villa',\n  'Crystal Palace',\n  'Fulham',\n  'Brentford',\n  'Wolves',\n  'Everton',\n  'Nottingham Forest',\n  'Burnley',\n  'Sheffield United',\n  'Luton Town',\n  'Bournemouth'\n];\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/app/api/score-prediction/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { predictMatchScore } from '@/lib/scorePredictor';\nimport { z } from 'zod';\n\nconst PredictionRequestSchema = z.object({\n  homeTeam: z.string().min(1, 'Home team is required'),\n  awayTeam: z.string().min(1, 'Away team is required'),\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    \n    // Validate request body\n    const validatedData = PredictionRequestSchema.parse(body);\n    const { homeTeam, awayTeam } = validatedData;\n    \n    // Check if teams are different\n    if (homeTeam === awayTeam) {\n      return NextResponse.json(\n        { error: 'Home team and away team must be different' },\n        { status: 400 }\n      );\n    }\n    \n    // Get prediction\n    const prediction = await predictMatchScore(homeTeam, awayTeam);\n    \n    return NextResponse.json({\n      success: true,\n      data: prediction,\n      timestamp: new Date().toISOString()\n    });\n    \n  } catch (error) {\n    console.error('Score prediction API error:', error);\n    \n    if (error instanceof z.ZodError) {\n      return NextResponse.json(\n        { \n          error: 'Invalid request data',\n          details: error.errors.map(err => ({\n            field: err.path.join('.'),\n            message: err.message\n          }))\n        },\n        { status: 400 }\n      );\n    }\n    \n    return NextResponse.json(\n      { error: 'Failed to predict match score. Please try again.' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET() {\n  return NextResponse.json({\n    message: 'Score Prediction API',\n    usage: 'POST /api/score-prediction with { homeTeam: string, awayTeam: string }',\n    example: {\n      homeTeam: 'Manchester City',\n      awayTeam: 'Arsenal'\n    }\n  });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,0BAA0B,oKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,UAAU,oKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,wBAAwB;QACxB,MAAM,gBAAgB,wBAAwB,KAAK,CAAC;QACpD,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAE/B,+BAA+B;QAC/B,IAAI,aAAa,UAAU;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA4C,GACrD;gBAAE,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,MAAM,aAAa,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE,UAAU;QAErD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAE7C,IAAI,iBAAiB,oKAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBACE,OAAO;gBACP,SAAS,MAAM,MAAM,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;wBAChC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC;wBACrB,SAAS,IAAI,OAAO;oBACtB,CAAC;YACH,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmD,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,OAAO;QACP,SAAS;YACP,UAAU;YACV,UAAU;QACZ;IACF;AACF","debugId":null}}]
}